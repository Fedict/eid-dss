<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC
	"-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article lang="en">
	<articleinfo>
		<title>FedICT eID Digital Signature Service Developer's Guide</title>
		<subtitle>
			Integrating the eID Digital Signature Service within your
			web applications.
		</subtitle>
		<copyright>
			<year>2009-2010</year>
			<holder>FedICT</holder>
		</copyright>
		<releaseinfo>draft 7 Oct 2010</releaseinfo>
		<authorgroup>
			<author>
				<firstname>Frank</firstname>
				<surname>Cornelis</surname>
				<email>frank.cornelis@fedict.be</email>
			</author>
		</authorgroup>
		<abstract>
			<para>
				This developer's guide serves as an entry point for integrating
				the eID Digital Signature Service in your web applications. The
				target audience are web developers and web application architects.
			</para>
		</abstract>
	</articleinfo>
	<section>
		<title>Introduction</title>
		<para>
			The FedICT eID Digital Signature Service (eID DSS) is a web service
			that can be used by web applications to integrate the creation of eID
			based digital signatures in the business work-flows. The eID Digital
			Signature Service supports different document and corresponding
			signature formats. The supported signature formats are:
			<itemizedlist>
				<listitem>
					<para>
						XML documents using XML Signature with XAdES-X-L extension
						and eID identity extension.
					</para>
				</listitem>
				<listitem>
					<para>
						ODF documents (OpenOffice), again using ODF XML Signatures
						with XAdES-X-L extension and eID identity extension.
					</para>
				</listitem>
				<listitem>
					<para>
						OOXML documents (Microsoft Office 2007 and 2010), using OOXML
						XML Signature with XAdES-X-L extension (recognized by Office
						itself) and eID identity extension.
					</para>
				</listitem>
				<listitem>
					<para>
						ZIP container holding your files, using XML Signature with
						XAdES-X-L extension and eID identity extension.
					</para>
				</listitem>
			</itemizedlist>
			The eID Digital Signature Service also supports different protocols.
			The following sections will highlight the different supported
			signature profiles and protocols.
		</para>
	</section>
	<section>
		<title>eID DSS Browser POST Protocol</title>
		<para>
			The eID Digital Signature Service Protocol POST Profile can be
			used to sign documents as part of web application work-flows. The
			service offers basic visualization of the document, and creation of
			the XAdES-X-L v1.4.1 signatures. The protocol is very lightweight to
			ease integration within your web applications.
		</para>
		<section>
			<title>Signature Request</title>
			<para>
				Suppose that the web application prepared document that needs
				to be signed by the end-user as part of some business work-flow. The
				web application sends the signature request to the eID DSS web
				service using an HTTP POST via the web browser of the client. The
				following POST parameters are available:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The required
						<code>SignatureRequest</code>
						POST parameter should contain the base-64 encoded document that
						needs to be signed.
					</para>
				</listitem>
				<listitem>
					<para>
						The required
						<code>target</code>
						POST parameter should contain the URL of the web application to
						which to send back the signed document.
					</para>
				</listitem>
				<listitem>
					<para>
						The optional
						<code>language</code>
						POST parameter should contain the language code which will be used
						by the eID DSS during signature creation.
					</para>
				</listitem>
				<listitem>
					<para>
						The optional
						<code>ContentType</code>
						POST parameter should contain the content type of the document
						being send. Defaults to
						<code>text/xml</code>
						.
					</para>
				</listitem>
                <listitem>
                    <para>
                        The optional
                        <code>RelayState</code>
                        POST parameter is an opaque reference to state
                        information maintained at the service provider.
                        . The same value should be returned by the eID DSS
                        service when returning.
                    </para>
                </listitem>
			</itemizedlist>
			<para>
				The web application can construct the eID DSS Browser POST
				Protocol signature request via the following piece of HTML code.
			</para>
			<programlisting role="XML">
                <![CDATA[
<form id="dss-request-form" method="post" action="https://www.e-contract.be/eid-dss/protocol/simple">
    <input type="hidden" name="SignatureRequest" value="..." />
    <input type="hidden" name="target" value="http://www.some-web-application.be/dss-landing-page" />
    <input type="hidden" name="language" value="nl" />
    <input type="hidden" name="ContentType" value="text/xml" />
    <input type="hidden" name="RelayState" value="foo123" />
    <input type="submit" value="Submit" />
</form>
<script type="text/javascript">
    document.getElementById('dss-request-form').submit();
</script>
                ]]>
            </programlisting>
            <section>
                <title>Signing</title>
                <para>
                    Optionally a Relying Party can  add a service signature to the
                    signature request. Following group of POST parameters should
                    be added in that case:
                </para>
                <itemizedlist>
                    <listitem>
                        <para>
                            <code>ServiceSigned</code> contains the URL encoded
                            comma-seperated list of POST parameters signed by
                            the RP. This should at least include the following
                            elements: <code>SignatureRequest</code>,
                            <code>target</code>, and if available
                            <code>language</code>, <code>ContentType</code>,
                            <code>RelayState</code>.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>ServiceSignature</code> contains the base64
                            encoded signature created by the RP. This signature
                            can be used by the eID DSS Service to verify the
                            integrity and the authenticity of the signed
                            document.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>ServiceCertificateChainSize</code> contains
                            the length as an integer string of the certificate
                            chain used by the RP to sign the request/response
                            protocol parameters.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>ServiceCertificate.n</code> contains the
                            base64 encoded n-th certificate of the RP service
                            certificate chain. n goes from 1 to the size of the
                            certificate chain. The RP end entity certificate has
                            number 1.
                        </para>
                    </listitem>
                </itemizedlist>
                <para>
                    Following is an example of such a signed eID DSS Browser
                    Post Protocol signature request.
                </para>
                <programlisting role="XML">
                    <![CDATA[
    <form id="dss-signed-request-form" method="post" action="https://www.e-contract.be/eid-dss/protocol/simple">

        <input type="hidden" name="SignatureRequest" value="..." />
        <input type="hidden" name="target" value="http://www.some-web-application.be/dss-landing-page" />
        <input type="hidden" name="language" value="nl" />
        <input type="hidden" name="ContentType" value="text/xml" />
        <input type="hidden" name="RelayState" value="foo123" />

        <input type="hidden" name="ServiceSigned" value="target,SignatureRequest,language,ContentType,RelayState" />
        <input type="hidden" name="ServiceSignature" value="..." />
        <input type="hidden" name="ServiceCertificateChainSize" value="3" />
        <input type="hidden" name="ServiceCertificate.1" value="..." />
        <input type="hidden" name="ServiceCertificate.2" value="..." />
        <input type="hidden" name="ServiceCertificate.3" value="..." />

        <input type="submit" value="Submit" />
    </form>
    <script type="text/javascript">
        document.getElementById('dss-signed-request-form').submit();
    </script>
                    ]]>
                </programlisting>
            </section>
            <section>
                <title>Java SDK</title>
                <para>
                    For easy integration, a <code>SignatureRequestServlet</code>
                    has been provided in the
                    <code>eid-dss-protocol-simple-client</code> artifact. This
                    servlet will, given the necessary configuration and session
                    attributes, construct a signature request and send it to the
                    eD DSS Service. An example of its usage can be found in the
                    <code>eid-dss-sp-webapp</code> artifact.
                </para>
                <para>
                    Some configuration servlet of the servlet can be acheived
                    either by providing:
                    <itemizedlist>
                        <listitem>
                            <para>
                                <code>SignatureRequestService(Class)</code>
                                Optional JNDI location (or Class reference) of
                                an implementation of the
                                SignatureRequestService interface. This
                                implementation can provide an optional SP
                                identity used for signing the signature
                                request, optional relay state, DSS destination,
                                SP destination and optional language to display
                                the FedICT eID DSS webapp in.
                            </para>
                        </listitem>
                    </itemizedlist>
                    or by providing following init parameters:
                    <itemizedlist>
                        <listitem>
                            <para>
                                <code>Target</code>
                                The location of the FedICT eID DSSlanding servlet.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <code>SPDestination</code>
                                The absolute location of the Service Providers's
                                DSS landing servlet, which will handle the
                                incoming signature response.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <code>SPDestinationPage</code>
                                The location of the Service Providers's DSS
                                landing servlet, which will handle the
                                incoming signature response. Absolute path
                                will be constructed automatically from the
                                servlet's context.
                            </para>
                        </listitem>
                        <listitem>
                            <para>
                                <code>Language</code>
                                Optional language to display the FedICT eID DSS
                                webapp in. Available locales are<code>nl, fr,
                                en</code>. If an unsupported locale is used,
                                the browsers' default locale will be used.
                            </para>
                        </listitem>
                    </itemizedlist>
                </para>
                <para>
                    The document to be signed or document ID in case of artifact
                    binding, along with the content type needs to be put on the
                    HTTP Session, the names of the session attribute need to be
                    specified in web.xml as shown below.
                </para>
                <para>
                    Following is a snippet of the <code>web.xml</code> for
                    configuring the servlet.
                </para>
                <programlisting role="XML">
                    <![CDATA[
    <servlet>
        <servlet-name>DSSRequestServlet</servlet-name>
        <servlet-class>
            be.fedict.eid.dss.protocol.simple.client.SignatureRequestServlet
        </servlet-class>
        <init-param>
            <param-name>SignatureRequestService</param-name>
            <param-value>
                be/fedict/eid/dss/sp/bean/SignatureRequestServiceBean
            </param-value>
        </init-param>
        <init-param>
            <param-name>TargetSessionAttribute</param-name>
            <param-value>target</param-value>
        </init-param>
        <init-param>
            <param-name>ContentTypeSessionAttribute</param-name>
            <param-value>ContentType</param-value>
        </init-param>
        <init-param>
            <param-name>RelayStateSessionAttribute</param-name>
            <param-value>RelayState</param-value>
        </init-param>
        <init-param>
            <param-name>SignatureRequestSessionAttribute</param-name>
            <param-value>SignatureRequest</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>DSSRequestServlet</servlet-name>
        <url-pattern>/dss-request</url-pattern>
    </servlet-mapping>
                    ]]>
                </programlisting>
                <para>
                    If you wish to control yourself the page that posts the
                    signature request to the eID DSS Service, the utility class
                    <code>SignatureRequestUtil</code>
                    is available for creating the service signature if wanted.
                    Make sure to respect the order of the
                    <code>ServiceCertificate.x</code> POST parameters!
                </para>
            </section>
            <section>
                <title>.NET SDK</title>
                <para>
                    For easy integration, a .NET SDK is available in the
                    <code>eid-dss-sdk-dotnet</code> artifact. This artifact
                    contains also a DSS Test SP WebSite showing the usage of
                    the SDK.
                </para>
                <para>
                    For SignatureRequest signing, the
                    <code>SignatureRequestUtil</code> class is available.
                </para>
            </section>

		</section>
		<section>
			<title>Signature Ceremony</title>
			<para>
				The eID Digital Signature Service will guarantee the correct
				execution of the signature ceremony. The signature ceremony is
				presented to the end-user via a web application interface. A first
				screen visualizes the incoming document. Here the end-user can
				choose to either sign the document, or to cancel the signing
				process. The next screen loads an eID Applet to have the document
				signed according to the W3C XMLDSig specification. The XML signature
				also contains a XAdES-X-L v1.4.1 extension in accordance with the
				recommendations of the expert group on the e-Signatures Service
				Directive. The created XML signature is a co-signature, meaning that
				multiple signatures can coexist within the same document. In case of
				XML documents, the signature is appended as last child of the
				document root element. At last the end-user's web browser is
				redirected to the originating web application where the signed
				document can be processed further.
			</para>
		</section>
		<section>
			<title>Signature Response</title>
			<para>
				After a successful completion of the signature ceremony, the
				eID DSS responds to the web application using an HTTP POST via the
				web browser of the client. The following POST parameters are
				available to the web application.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The
						<code>SignatureStatus</code>
						parameter contains the result code of the signature operation.
						The
						value of this parameter can be:
						<itemizedlist>
							<listitem>
								<para>
									<code>OK</code>
									in case the signature ceremony was successfully completed. Only
									in this case
									<code>SignatureResponse</code>
									and
									<code>SignatureCertificate</code>
									will
									also be available.
								</para>
							</listitem>
							<listitem>
								<para>
									<code>FILE_FORMAT</code>
									in case the incoming file was not a well-formated document.
								</para>
							</listitem>
							<listitem>
								<para>
									<code>USER_CANCELLED</code>
									in case the user cancelled the signature ceremony.
								</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>SignatureResponse</code>
						contains the base-64 encoded signed document.
					</para>
				</listitem>
				<listitem>
					<para>
						<code>SignatureCertificate</code>
						contains the base-64 encoded X509 certificate of the signatory.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				In case the eID Digital Signature Service signs the response
				messages the following additional POST parameters are available to
				the web application. This protocol level signature is created by the
				eID DSS identity itself.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<code>ServiceSigned</code>
						contains the URL encoded comma-separated list of POST parameters
						signed by the eID DSS itself. Example:
						<code>target,SignatureRequest,SignatureResponse,SignatureCertificate
						</code>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>ServiceSignature</code>
						contains the base64 encoded signature created by the eID DSS
						service itself. This signature can be used by the Relying Party to
						verify the integrity and the authenticity of the signed document.
					</para>
				</listitem>
				<listitem>
					<para>
						<code>ServiceCertificateChainSize</code>
						contains the length as an integer string of the certificate chain
						used by the service to sign the request/response protocol
						parameters.
					</para>
				</listitem>
				<listitem>
					<para>
						<code>ServiceCertificate.n</code>
						contains the base64 encoded n-th certificate of the service
						certificate chain.
						<code>n</code>
						goes from 1 to the size of the certificate chain. The eID DSS end
						entity certificate has number 1.
					</para>
				</listitem>
			</itemizedlist>
			<section>
				<title>Java SDK</title>
				<para>
					To ease the handling of DSS response messages according to the
					described protocol we've provided eID DSS SDK components. These can
					be found within the
					<code>eid-dss-protocol-simple-client</code>
					artifact. The corresponding javadoc documentation is also part of
					the eID DSS SDK.
				</para>
			</section>
            <section>
                <title>.NET SDK</title>
                <para>
                    To ease the handling of DSS response messages according to the
                    described protocol we've provided eID DSS SDK components.
                    These can be found in the <code>eid-dss-sdk-dotnet</code>
                    artifact. You can use the <code>SignatureProcessor</code>
                    class for validation and parsing of the DSS responses.
                    Refer to the Test DSS SP WebSite for more information on the
                    usage.
                </para>
            </section>
		</section>
        <section>
            <title>Artifact Binding</title>
            <para>
                The Artifact Binding is a variation to the standard Browser POST
                protocol where the to be signed document and the signed document
                will be sent and retrieved to/from the eID DSS Service using a
                seperate synchronous binding. The eID DSS Service provides such
                a service in its OASIS DSS Web Service. More detail on this web
                service can be found in
                <link linkend="oasis_ws" endterm="oasis_ws.title"/>.
            </para>
            <para>
                The signature request and response will therefore vary slightly
                as the identifiers will be posted instead of the actual
                documents.
            </para>
            <para>
                For the signature request the required
                <code>SignatureRequest</code> is replaced with the required
                <code>SignatureRequestId</code> POST paramater. This is the
                identifier returned by the OASIS DSS Web Service "store" call.
            </para>
            <para>
                For the signature response the <code>SignatureResponse</code>
                POST parameter will be replaced by the
                <code>SignatureResponseId</code> POST parameter which will
                contain the identifier to be used in the OASIS DSS Web Service
                "retrieve" call for fetching the signed document.
            </para>
        </section>
    </section>
	<section id="oasis_ws">
		<title id="oasis_ws.title">OASIS DSS Web Service</title>
        <para>
            The eID Digital Signature Service provides a SOAP web service for
            validation of signed documents and for a generic "Artifact Binding"
            which Signature Protocols can use as a synchronous binding for
            transmitting the to be signed document to the eID DSS Service and
            retrieval of the signed document from it. This web service has been
            implemented according to the OASIS Digital Signature Service Core
            Protocols, Elements, and Bindings Version 1.0. Specific profiles are
            used for validation and the "Artifact Binding".
        </para>
		<para>In this section we will highlight the web service protocol by
			example. A web service client can connect to the SOAP web service
			using some URL. For example:
		</para>
		<programlisting>https://www.e-contract.be/eid-dss-ws/dss</programlisting>
		<para>
			In the examples we'll use the following namespace prefixes:
		</para>
		<table>
			<title>Used namespaces</title>
			<tgroup cols="2">
				<colspec colwidth="1*" />
				<colspec colwidth="8*" />
				<thead>
					<row>
						<entry>Prefix</entry>
						<entry>Namespace</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<code>soap</code>
						</entry>
						<entry>
							<code>http://schemas.xmlsoap.org/soap/envelope/</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>dss</code>
						</entry>
						<entry>
							<code>urn:oasis:names:tc:dss:1.0:core:schema</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>vr</code>
						</entry>
						<entry>
							<code>
								urn:oasis:names:tc:dss-x:1.0:profiles:verificationreport:schema#
							</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>xades</code>
						</entry>
						<entry>
							<code>http://uri.etsi.org/01903/v1.3.2#</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>xmldsig</code>
						</entry>
						<entry>
							<code>http://www.w3.org/2000/09/xmldsig#</code>
						</entry>
					</row>
                    <row>
                        <entry>
                            <code>artifact</code>
                        </entry>
                        <entry>
                            <code>be:fedict:eid:dss:profile:artifact-binding:1.0</code>
                        </entry>
                    </row>
				</tbody>
			</tgroup>
		</table>
        <section>
            <title>Validation</title>
            <para>
                The validation operation of the web service also implements
                the OASIS Profile for Comprehensive Multi-signature Verification
                Reports for OASIS Digital Signature Services Version 1.0 for
                providing detailed reporting on the signatures of a signed
                document.
            </para>
            <para>
                A SOAP request for validation of a signed document looks as
                follows:
            </para>
            <programlisting role="XML"><![CDATA[<soap:Envelope>
    <soap:Body>
        <dss:VerifyRequest RequestID="some-id">
            <dss:OptionalInputs>
                <vr:ReturnVerificationReport>
                    <vr:IncludeVerifier>false</vr:IncludeVerifier>
                    <vr:IncludeCertificateValues>true</vr:IncludeCertificateValues>
                    <vr:ReportDetailLevel>
                    urn:oasis:names:tc:dss-x:1.0:profiles:verificationreport:reportdetail:noDetails
                    </vr:ReportDetailLevel>
                </vr:ReturnVerificationReport>
            </dss:OptionalInputs>
            <dss:InputDocuments>
                <dss:Document>
                    <dss:Base64XML>the document base64 encoded</dss:Base64XML>
                </dss:Document>
            </dss:InputDocuments>
        </dss:VerifyRequest>
    </soap:Body>
    </soap:Envelope>]]></programlisting>
            <para>
                The corresponding SOAP response looks as follows:
            </para>
            <programlisting role="XML"><![CDATA[<soap:Envelope>
    <soap:Body>
        <dss:Response RequestID="the original request id">
            <dss:Result>
                <dss:ResultMajor>
                    urn:oasis:names:tc:dss:1.0:resultmajor:Success
                </dss:ResultMajor>
                <dss:ResultMinor>
                    urn:oasis:names:tc:dss:1.0:resultminor:valid:signature:OnAllDocuments
                </dss:ResultMinor>
            </dss:Result>
            <dss:OptionalOutputs>
                <vr:VerificationReport>
                    <vr:IndividualReport>
                        <vr:SignedObjectIdentifier>
                            <vr:SignedProperties>
                                <vr:SignedSignatureProperties>
                                    <xades:SigningTime>
                                        2010-09-13T15:35:49.767+02:00
                                    </xades:SigningTime>
                                </vr:SignedSignatureProperties>
                            </vr:SignedProperties>
                        </vr:SignedObjectIdentifier>
                        <dss:Result>
                            <dss:ResultMajor>
                                urn:oasis:names:tc:dss:1.0:resultmajor:Success
                            </dss:ResultMajor>
                            <dss:ResultMinor>
                                urn:oasis:names:tc:dss:1.0:resultminor:valid:signature:OnAllDocuments
                            </dss:ResultMinor>
                        </dss:Result>
                        <vr:Details>
                            <vr:IndividualCertificateReport>
                                <vr:CertificateIdentifier>
                                    <xmldsig:X509IssuerName>
                                        SERIALNUMBER=200612, CN=Citizen CA, C=BE
                                    </xmldsig:X509IssuerName>
                                    <xmldsig:X509SerialNumber>
                                        21267647932559078400084294942057726232
                                    </xmldsig:X509SerialNumber>
                                </vr:CertificateIdentifier>
                                <vr:Subject>
                                    SERIALNUMBER=79102520991, GIVENNAME=Frank Henri, SURNAME=Cornelis, CN=Frank Cornelis (Signature), C=BE
                                </vr:Subject>
                                <vr:ChainingOK>
                                    <vr:ResultMajor>
                                        urn:oasis:names:tc:dss:1.0:detail:valid
                                    </vr:ResultMajor>
                                </vr:ChainingOK>
                                <vr:ValidityPeriodOK>
                                    <vr:ResultMajor>
                                        urn:oasis:names:tc:dss:1.0:detail:valid
                                    </vr:ResultMajor>
                                </vr:ValidityPeriodOK>
                                <vr:ExtensionsOK>
                                    <vr:ResultMajor>
                                        urn:oasis:names:tc:dss:1.0:detail:valid
                                    </vr:ResultMajor>
                                </vr:ExtensionsOK>
                                <vr:CertificateValue>
                                    base64 encoded signer certificate
                                </vr:CertificateValue>
                                <vr:SignatureOK>
                                    <vr:SigMathOK>
                                        <vr:ResultMajor>
                                            urn:oasis:names:tc:dss:1.0:detail:valid
                                        </vr:ResultMajor>
                                    </vr:SigMathOK>
                                </vr:SignatureOK>
                                <vr:CertificateStatus>
                                    <vr:CertStatusOK>
                                        <vr:ResultMajor>
                                            urn:oasis:names:tc:dss:1.0:detail:valid
                                        </vr:ResultMajor>
                                    </vr:CertStatusOK>
                                </vr:CertificateStatus>
                            </vr:IndividualCertificateReport>
                        </vr:Details>
                    </vr:IndividualReport>
                </vr:VerificationReport>
            </dss:OptionalOutputs>
        </dss:Response>
    </soap:Body>
    </soap:Envelope>]]></programlisting>
            <para>
                The signature is uniquely identified by the
                <code>SigningTime</code>
                element. The certificate of the signatory is delivered via the
                <code>CertificateValue</code>
                element.
            </para>
        </section>
        <section>
            <title>Artifact Binding</title>
            <para>
                A custom OASIS DSS Profile has been introduced for this which
                used the <code>SignRequest</code> operation for pushing the
                to be signed document and retrieval of the signed document to/
                from the eID DSS Service. The profile URI for this is:
                <code>be:fedict:eid:dss:profile:artifact-binding:1.0</code>
            </para>
            <section>
                <title>Store</title>
                <para>
                    A SOAP request for "storing" the to be signed document to
                    the eID DSS Service looks as follow:
                </para>
                <programlisting role="XML">
                    <![CDATA[
<soap:Envelope>
    <soap:Body>
        <dss:SignRequest
            Profile="be:fedict:eid:dss:profile:artifact-binding:1.0"
            RequestID="dss-sign-request-1234...">

            <dss:OptionalInputs>
                <artifact:ReturnStorageInfo />
            </dss:OptionalInputs>

            <dss:InputDocuments>
                <dss:Document>
                    <dss:Base64XML>...</dss:Base64XML>
                </dss:Document>
            </dss:InputDocuments>

        </dss:SignRequest>
    </soap:Body>
</soap:Envelope>
                    ]]>
                </programlisting>
                <para>
                    The to be signed document is passed along base64 encoded in
                    the OASIS DSS InputDocuments element.
                </para>
                <para>
                    The custom <code>artifact:ReturnStorageInfo</code> optional
                    input is used within the dss:OptionalInputs element to mark
                    that the document passed in dss:InputDocument/dss:Document
                    should be stored for later signing. Only accepted by the eID
                    DSS when dss:SignRequest/@Profile is set to the
                    corresponding profile URI. The eID DSS will return a custom
                    <code>StorageInfo</code> element within dss:OptionalOutputs
                    in the returned <code>SignResponse</code>.
                </para>
                <para>
                    Following is an example of such a SOAP response.
                </para>
                <programlisting role="XML">
                    <![CDATA[
<soap:Envelope>
    <soap:Body>
        <dss:SignResponse
            Profile="be:fedict:eid:dss:profile:artifact-binding:1.0"
            RequestID="dss-sign-request-1234...">

            <dss:Result>
                <dss:ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</dss:ResultMajor>
            </dss:Result>

            <dss:OptionalInputs>
                <artifact:StorageInfo>
                    <artifact:Identifier>de2f6265-fa06-4ae7-8f7f-d289cd590a32</artifact:Identifier>
                    <artifact:Validity>
                        <artifact:NotBefore>2011-05-11T16:38:50.600+02:00</artifact:NotBefore>
                        <artifact:NotAfter>2011-05-11T16:43:50.392+02:00</artifact:NotAfter>
                    </artifact:Validity>
                </artifact:StorageInfo>
            </dss:OptionalInputs>

        </dss:SignResponse>
    </soap:Body>
</soap:Envelope>
                    ]]>
                </programlisting>
                <para>
                    The <code>SignResponse</code> request ID needs to match the
                    request ID of the <code>SignRequest</code>.
                </para>
                <para>
                    The custom <code>artifact:StorageInfo</code> element
                    contains the identifier of the stored document and the
                    validity of the temporary storage of the given document. The
                    eID DSS Service manages the lifecycle of the document within
                    this temporary storage. The Relying Party can use this
                    information to hurry up.
                </para>
                <para>
                    After this the Signature Protocol can use the identifier
                    for making a signature request to the eID DSS Service which
                    will retrieve the document from its temporary storage when
                    needed for signing, sign the document and store the signed
                    document in the temporary storage for retrieval later on.
                </para>
            </section>
            <section>
                <title>Retrieve</title>
                <para>
                    A SOAP request for "retrieval" of the by now signed document
                    to the eID DSS Service looks as follow:
                </para>
                <programlisting role="XML">
                    <![CDATA[
<soap:Envelope>
    <soap:Body>
        <dss:SignRequest
            Profile="be:fedict:eid:dss:profile:artifact-binding:1.0"
            RequestID="dss-sign-request-1234...">

            <dss:OptionalInputs>
                <artifact:ReturnStoredDocument>
                    <artifact:Identifier>f86a925b-0360-47c7-b329-a7fa3988e2e6</Identifier>
                </artifact:ReturnStoredDocument>
            </dss:OptionalInputs>
        </dss:SignRequest>
    </soap:Body>
</soap:Envelope>
                    ]]>
                </programlisting>
                <para>
                    The identifier is the identifier of the signed document in
                    the eID DSS service's temporary storage. This identifier is
                    communicated back to the RP according to the used Signature
                    Protocol, beind <code>SignatureResponseId</code> in case of
                    the eID DSS Browser Post Protocol. This identifier is only
                    accepted by the eID DSS when dss:SignRequest/@Profile is set
                    to the corresponding profile URI. The eID DSS will return
                    the document within a
                    <code>
                        dss:SignResponse/dss:OptionalOutputs/dss:DocumentWithSignature
                    </code> element. After document retrieval, the eID DSS will
                    remove the document from the temporary storage. If the
                    document is not retrieved by the Relying Party, the eID DSS
                    will remove the document from the temporary storage after a
                    certain time indicated by Validity/NotAfter.
                </para>
                <para>
                    Following is an example of a SOAP response to this request.
                </para>
                <programlisting role="XML">
                    <![CDATA[
<soap:Envelope>
    <soap:Body>
        <dss:SignResponse
            Profile="be:fedict:eid:dss:profile:artifact-binding:1.0"
            RequestID="dss-sign-request-1234...">

            <dss:Result>
                <dss:ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</dss:ResultMajor>
            </dss:Result>

            <dss:OptionalOutputs>
                <dss:DocumentWithSignature>
                    <dss:Document>
                        <dss:Base64XML>...</dss:Base64XML>
                    </dss:Document>
                </dss:DocumentWithSignature>
            </dss:OptionalOutputs>

        </dss:SignResponse>
    </soap:Body>
</soap:Envelope>
                    ]]>
                </programlisting>
                <para>
                    The <code>SignResponse</code>'s request ID needs to match
                    the request ID of the <code>SignRequest</code>.
                </para>
                <para>
                    The signed document is returned base64 encoded in the OASIS
                    DSS <code>DocumentWithSignature</code> element.
                </para>

            </section>
        </section>
        <section>
            <title>Java SDK</title>
            <para>
                The eID DSS SDK comes with a Java OASIS DSS web service
                client component. This component is part of the
                <code>eid-dss-client</code>
                artifact. The corresponding javadoc documentation is also part of
                the eID DSS SDK.
            </para>
        </section>
        <section>
            <title>.NET SDK</title>
            <para>
                The eID DSS SDK comes with a .NET OASIS DSS web service
                client component. This component is part of the
                <code>eid-dss-sdk-dotnet</code> artifact. Refer to the DSS
                Test SP WebSite also for more information on the usage.
            </para>
        </section>
	</section>
	<section>
		<title>Document Visualization</title>
		<para>
			The eID Digital Signature Service features visualization of the
			documents before they are signed. In case of XML documents, the
			Relying Party can register an XML Schema and XML Style Sheet with the
			eID DSS hosting party to visualize the XML data structure within the
			web browser as part of the signature ceremony. This allows the
			Relying Party to define a domain specific language for its
			transactions that need to be signed.
		</para>
		<para>
			For example, suppose the Relying Party defined a domain specific
			language to express some transaction as follows:
		</para>
		<programlisting role="XML"><![CDATA[<Transaction xmlns="urn:be:fedict:eid:dss:example">
	<From>Tom</From>
	<To>Jerry</To>
	<Amount>10.5</Amount>
	<Description>Example transaction</Description>
</Transaction>]]></programlisting>
		<para>
			The corresponding XML Schema could look as follows.
		</para>
		<programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:be:fedict:eid:dss:example"
	xmlns:tns="urn:be:fedict:eid:dss:example" elementFormDefault="qualified"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
	<xsd:import namespace="http://www.w3.org/2000/09/xmldsig#"
		schemaLocation="xmldsig-core-schema.xsd" />
	<element name="Transaction" type="tns:TransactionType" />
	<complexType name="TransactionType">
		<sequence>
			<element name="From" type="xsd:string" />
			<element name="To" type="xsd:string" />
			<element name="Amount" type="xsd:double" />
			<element name="Description" type="xsd:string" minOccurs="0" />
			<element ref="ds:Signature" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
	</complexType>
</schema>]]></programlisting>
		<para>
			A possible XML Style Sheet could then be:
		</para>
		<programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:tns="urn:be:fedict:eid:dss:example">
	<xsl:param name="language">en</xsl:param>
	<xsl:template match="/tns:Transaction">

		<xsl:variable name="from">
			<xsl:choose>
				<xsl:when test="$language = 'nl'">
					Van
				</xsl:when>
				<xsl:otherwise>
					From
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>

		<html>
			<body>
				<h1>Transaction</h1>
				<table>
					<tr>
						<th>
							<xsl:copy-of select="$from" />
							:
						</th>
						<td>
							<xsl:value-of select="tns:From" />
						</td>
					</tr>
					<tr>
						<th>To:</th>
						<td>
							<xsl:value-of select="tns:To" />
						</td>
					</tr>
					<tr>
						<th>Amount:</th>
						<td>
							<xsl:value-of select="tns:Amount" />
						</td>
					</tr>
					<xsl:for-each select="tns:Description">
						<tr>
							<th>Description:</th>
							<td>
								<xsl:value-of select="." />
							</td>
						</tr>
					</xsl:for-each>
				</table>
			</body>
		</html>
	</xsl:template>
</xsl:stylesheet>]]></programlisting>
		<para>
			The XML Style Sheet should output HTML.
		</para>
		<para>
			As you can see the XML Style Sheet receives a
			<code>language</code>
			parameter from the eID Digital Signature Service to aid the
			visualization process.
		</para>
		<para>
			An XML Style Sheet can easily be developed using the following
			command:
		</para>
		<programlisting role="XML"><![CDATA[xsltproc --stringparam language nl example.xsl example.xml]]></programlisting>
		<para>
			Once the XML Schema and corresponding XML Style Sheet is ready,
			you can submit this to the eID Digital Signature Service hosting
			party for registration within the eID DSS service.
		</para>
	</section>
	<appendix>
		<title>eID Digital Signature Service Developer's Guide License</title>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="cc.logo.large.png"
						scale="100" />
				</imageobject>
			</mediaobject>
			This document has been released under the Creative Commons license.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="share.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You are free to Share — to copy, distribute and transmit the work.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="by.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You must attribute the work in the manner specified by the author or
			licensor (but not in any way that suggests that they endorse you or
			your use of the work).
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nc.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not use this work for commercial purposes.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nd.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not alter, transform, or build upon this work.
		</para>
		<para>
			More information about the Creative Commons license conditions can be
			found at
			<ulink url="http://creativecommons.org/">Creative Commons organization</ulink>
			.
		</para>
	</appendix>
	<appendix>
		<title>eID Digital Signature Service License</title>
		<para>
			The eID Digital Signature Service source code has been released
			under the GNU LGPL version 3.0.
		</para>
		<para>
			<code>
				This is free software; you can redistribute it and/or modify it
				under the terms of the GNU Lesser General Public License version 3.0
				as published by the Free Software Foundation.
			</code>
		</para>
		<para>
			<code>
				This software is distributed in the hope that it will be
				useful, but WITHOUT ANY WARRANTY; without even the implied warranty
				of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
				Lesser General Public License for more details.
			</code>
		</para>
		<para>
			<code>
				You should have received a copy of the GNU Lesser General
				Public License along with this software; if not, see
				http://www.gnu.org/licenses/.
			</code>
		</para>
	</appendix>
	<appendix>
		<title>Revision history</title>
		<table>
			<title>Revision history</title>
			<tgroup cols="2">
				<colspec colwidth="1*" />
				<colspec colwidth="1*" />
				<colspec colwidth="2*" />
				<thead>
					<row>
						<entry>Date</entry>
						<entry>Author</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>9 Oct 2009</entry>
						<entry>Frank Cornelis</entry>
						<entry>Initial version.</entry>
					</row>
					<row>
						<entry>25 Aug 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>language parameter.</entry>
					</row>
					<row>
						<entry>27 Aug 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>Service signature.</entry>
					</row>
					<row>
						<entry>15 Sep 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>OASIS DSS validation web service.</entry>
					</row>
					<row>
						<entry>21 Sep 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>XML schemas and XML style sheets</entry>
					</row>
					<row>
						<entry>7 Oct 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>ODF, OOXML, ZIP document formats.</entry>
					</row>
                    <row>
                        <entry>9 May 2011</entry>
                        <entry>Wim Vandenhaute</entry>
                        <entry>eID DSS Artifact Binding</entry>
                    </row>
				</tbody>
			</tgroup>
		</table>
	</appendix>
</article>