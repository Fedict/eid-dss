<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC
	"-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<article lang="en">
	<articleinfo>
		<title>eID Digital Signature Service Developer's Guide</title>
		<subtitle>
			Integrating the eID Digital Signature Service within your
			web applications.
		</subtitle>
		<subtitle>
			Version &project.version;
		</subtitle>
		<copyright>
			<year>2009-2013</year>
			<holder>FedICT</holder>
		</copyright>
		<releaseinfo>17 September 2013</releaseinfo>
		<authorgroup>
			<author>
				<firstname>Frank</firstname>
				<surname>Cornelis</surname>
				<email>frank.cornelis@fedict.be</email>
			</author>
		</authorgroup>
		<abstract>
			<para>
				This developer's guide serves as an entry point for integrating
				the eID Digital Signature Service in your web applications. The
				target audience are web developers and web application architects.
			</para>
		</abstract>
	</articleinfo>
	<section>
		<title>Introduction</title>
		<para>
			The eID Digital Signature Service (eID DSS) is a web service
			that can be used by web applications to integrate the creation of eID
			based qualified signatures in business work-flows. The eID
			Digital
			Signature Service supports different document and
			corresponding
			signature formats. The eID DSS supports XAdES-X-L
			v1.4.2 signatures in
			accordance with the recommendations of the
			expert group on the
			e-Signatures Service Directive. The supported
			document formats are:
			<itemizedlist>
				<listitem>
					<para>
						XML documents using XML Signatures with XAdES-X-L extension
						and eID identity extension.
					</para>
				</listitem>
				<listitem>
					<para>
						ODF documents (OpenOffice), again using ODF XML Signatures
						with XAdES-X-L extension and eID identity extension.
					</para>
				</listitem>
				<listitem>
					<para>
						OOXML documents (Microsoft Office 2007 and 2010), using OOXML XML
						Signatures with XAdES-X-L extension (recognized by Office itself)
						and eID identity extension.
						<warning>
							<para>
								When enabling the eID identity extension when signing a
								document within eID DSS, Office 2010 will
								no longer recognize the
								signature as being valid.
							</para>
						</warning>
					</para>
				</listitem>
				<listitem>
					<para>
						ZIP container holding your files, using XML Signatures with
						XAdES-X-L extension and eID identity extension.
					</para>
				</listitem>
				<listitem>
					<para>
						Associated Signature Container (ETSI TS 102 918 v1.1.1)
						holding your files, using XML Signatures with XAdES-X-L extension
						and eID identity extension.
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			The eID Digital Signature Service also supports different protocols.
			Basically there are two types of protocols:
			<itemizedlist>
				<listitem>
					<para>
						Protocols for creation of qualified electronic signatures.
						Here the protocol is web browser POST based as the eID DSS needs
						to be able to interact with the end-user for eID signature
						creation.
					</para>
				</listitem>
				<listitem>
					<para>
						Protocols for validation of qualified electronic signatures.
						These protocols are SOAP based.
					</para>
				</listitem>
			</itemizedlist>
			An overview of all supported protocols and document formats can be
			obtained by directly visiting your eID DSS instance, for example at:
			<computeroutput>
				https://www.e-contract.be/eid-dss/
			</computeroutput>
		</para>
		<para>
			When integrating the eID DSS in your digitalized business
			work-flows
			one should take care not to create a document-centric
			system from the
			end-user's point-of-view. Of course, behind the scenes
			your system
			will have to deal with digitally signed documents in the
			end, but the
			end-user should not be bothered with those documents for
			regular
			business operations. This means that the work-flow should not
			require
			that the end-user has to upload/download signed documents
			manually to
			be able to continue a work-flow.
		</para>
		<para>
			The to-be-signed document should be generated by your web
			application
			itself.
			So the user should not have to upload the document
			himself.
			The eID DSS offers a visualization of this document as part
			of the
			signature ceremony. So the end-user can verify what he's about
			to
			sign via the independent eID DSS service.
		</para>
		<para>
			Your web application should
			take
			care of storing signed document in
			some document repository. This
			approach has several advantages:
			<itemizedlist>
				<listitem>
					<para>
						Prevents loss of data. Unlike it is the case in the
						paper-world, in the digital world people tend to lose their data
						very fast: hard disks crash, laptops get stolen, or viruses may
						corrupt files. So depending on the user to keep track of their
						digitally signed documents is a very naive attitude.
					</para>
				</listitem>
				<listitem>
					<para>
						Most users own multiple devices these days. A
						document-centric approach would require them to keep track on
						what
						device they stored which signed document. In practice this
						won't
						work.
					</para>
				</listitem>
				<listitem>
					<para>
						Automatic signature archival/upgrading, for example from
						XAdES-X-L to XAdES-A in case SHA1 goes down. Organizing such
						signature upgrade when the signed documents are not available
						within some document repository is nearly impossible.
					</para>
				</listitem>
				<listitem>
					<para>
						Eases further processing of signed data.
					</para>
				</listitem>
			</itemizedlist>
			So signed documents should be kept within some secured document
			repository. For the verification you can simple give the end-user (or
			the target group) some unique URL towards the signed document within
			this secured document
			repository. This yields the additional advantage
			that you can present
			valid signatures in the correct application
			context (and for example
			activate certain functionality in function of
			the rights/obligations
			defined within the digitally signed contract).
			Such a document
			repository also allows for an application-specific
			access control
			towards the signed documents.
			Of course users should
			still be allowed
			to download their signed documents manually.
			This
			could be initiated from his personal profile page within your web
			application where you can present a list of documents that the user
			has signed in the past.
			It should
			be
			noted
			that the eID DSS does
			not
			provide such document
			repository
			functionality for the moment as
			the
			implementation of such
			a repository
			can be very
			application-specific.
		</para>
		<para>
			The following sections highlights the different supported
			signature profiles and protocols.
		</para>
	</section>
	<section>
		<title>eID DSS Browser POST Protocol</title>
		<para>
			The eID Digital Signature Service Browser POST Profile can be
			used to sign documents as part of web application work-flows. The
			service offers basic visualization of the document, and creation of
			the XAdES-X-L v1.4.2 signatures. The protocol is very lightweight to
			ease integration within your web applications. Nonetheless the
			protocol does provide a message level security mechanism similar to
			the one found in the OpenID protocol.
		</para>
		<section>
			<title>Signature Request</title>
			<para>
				Suppose that the web application prepared a document that needs
				to be signed by the end-user as part of some business work-flow. The
				web application sends the signature request to the eID DSS web
				service using an HTTP POST via the web browser of the end-user. The
				following POST parameters are available:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The required
						<code>SignatureRequest</code>
						POST parameter should contain the base-64 encoded document that
						needs to be signed.
					</para>
				</listitem>
				<listitem>
					<para>
						The required
						<code>target</code>
						POST parameter should contain the URL of the web application
						component to which to send back the signed document.
					</para>
				</listitem>
				<listitem>
					<para>
						The optional
						<code>language</code>
						POST parameter should contain the language code which is used
						by
						the eID DSS during signature creation.
					</para>
				</listitem>
				<listitem>
					<para>
						The optional
						<code>ContentType</code>
						POST parameter should contain the content type of the document
						being send. Defaults to
						<code>text/xml</code>
						.
					</para>
				</listitem>
				<listitem>
					<para>
						The optional
						<code>RelayState</code>
						POST parameter is an opaque reference to state information
						maintained at the service provider. The same value is returned by
						the eID DSS service within the response message.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				For example, the web application can construct the eID DSS
				Browser POST
				Protocol signature request via the following piece of
				HTML code.
			</para>
			<programlisting role="XML">
                <![CDATA[
<form id="dss-request-form" method="post" action="https://www.e-contract.be/eid-dss/protocol/simple">
    <input type="hidden" name="SignatureRequest" value="..." />
    <input type="hidden" name="target" value="http://www.some-web-application.be/dss-landing-page" />
    <input type="hidden" name="language" value="nl" />
    <input type="hidden" name="ContentType" value="text/xml" />
    <input type="hidden" name="RelayState" value="foo123" />
    <input type="submit" value="Submit" />
</form>
<script type="text/javascript">
    document.getElementById('dss-request-form').submit();
</script>
                ]]>
			</programlisting>
			<section>
				<title>Service Signature</title>
				<para>
					Optionally a Relying Party (RP) can add a service signature to
					the
					signature request. The following group of POST parameters should
					be appended:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							<code>ServiceSigned</code>
							contains the URL encoded
							comma-seperated list of POST parameters
							signed by
							the RP. This list should at least include the following
							elements:
							<code>SignatureRequest</code>
							,
							<code>target</code>
							, and if available
							<code>language</code>
							,
							<code>ContentType</code>
							, and
							<code>RelayState</code>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							<code>ServiceSignature</code>
							contains the base64
							encoded signature created by the RP. This
							signature
							can be used by the eID DSS Service to verify the
							integrity and authenticity of the request message. The signature
							algorithm to be used is
							<code>SHA1-RSA</code>
							.
						</para>
					</listitem>
					<listitem>
						<para>
							<code>ServiceCertificateChainSize</code>
							contains
							the length as an integer string of the certificate
							chain
							used by the RP to sign the request/response
							protocol parameters.
						</para>
					</listitem>
					<listitem>
						<para>
							<code>ServiceCertificate.n</code>
							contains the
							base64 encoded n-th certificate of the RP service
							certificate chain. n goes from 1 to the size of the
							certificate
							chain. The RP end entity certificate has
							number 1.
						</para>
					</listitem>
				</itemizedlist>
				<para>
					Following is an example of such a signed eID DSS Browser
					POST
					Protocol signature request.
				</para>
				<programlisting role="XML">
                    <![CDATA[
    <form id="dss-signed-request-form" method="post" action="https://www.e-contract.be/eid-dss/protocol/simple">

        <input type="hidden" name="SignatureRequest" value="..." />
        <input type="hidden" name="target"
        	value="http://www.some-web-application.be/dss-landing-page" />
        <input type="hidden" name="language" value="nl" />
        <input type="hidden" name="ContentType" value="text/xml" />
        <input type="hidden" name="RelayState" value="foo123" />

        <input type="hidden" name="ServiceSigned" value="target,SignatureRequest,language,
        	ContentType,RelayState" />
        <input type="hidden" name="ServiceSignature" value="..." />
        <input type="hidden" name="ServiceCertificateChainSize" value="3" />
        <input type="hidden" name="ServiceCertificate.1" value="..." />
        <input type="hidden" name="ServiceCertificate.2" value="..." />
        <input type="hidden" name="ServiceCertificate.3" value="..." />

        <input type="submit" value="Submit" />
    </form>
    <script type="text/javascript">
        document.getElementById('dss-signed-request-form').submit();
    </script>
                    ]]>
				</programlisting>
			</section>
			<section>
				<title>Java SDK</title>
				<para>
					For easy integration, a
					<code>SignatureRequestServlet</code>
					servlet has been provided in the
					<code>eid-dss-protocol-simple-client</code>
					artifact. This
					servlet will, given the necessary configuration and
					session
					attributes, construct a signature request and send it to the
					eD DSS Service. An example of its usage can be found in the
					<code>eid-dss-sp-webapp</code>
					example service provider web application artifact.
				</para>
				<para>
					An important configuration is the service provider
					destination. The
					service provider destination points to the
					(servlet) component of
					the Relying Party that will process incoming
					eID DSS protocol
					response messages.
				</para>
				<para>
					Some configuration of the servlet can be achieved
					either by
					providing:
					<itemizedlist>
						<listitem>
							<para>
								<code>SignatureRequestService(Class)</code>
								Optional JNDI location (or Class reference) of
								an implementation
								of the
								<code>SignatureRequestService</code>
								SPI interface. This
								implementation can
								provide an optional SP
								identity used for signing the signature
								request, optional relay
								state, DSS destination,
								SP destination
								and optional language used
								in
								the eID DSS pages.
							</para>
						</listitem>
					</itemizedlist>
					or by providing the following init parameters:
					<itemizedlist>
						<listitem>
							<para>
								<code>Target</code>
								The location of the eID DSS landing servlet.
								This is for
								example: https://www.e-contract.be/eid-dss/protocol/simple
							</para>
						</listitem>
						<listitem>
							<para>
								<code>SPDestination</code>
								The absolute location of the Service Providers's
								DSS landing
								servlet, which will handle the
								incoming signature response
								messages.
							</para>
						</listitem>
						<listitem>
							<para>
								<code>SPDestinationPage</code>
								The location of the Service Providers's DSS
								landing servlet,
								which will handle the
								incoming signature response. Absolute path
								will be constructed automatically from the
								servlet's context.
							</para>
						</listitem>
						<listitem>
							<para>
								<code>Language</code>
								Optional language to display the eID DSS
								webapp in.
								Available locales are
								<code>nl, fr,
									en
								</code>
								. If an unsupported locale is used,
								the browser's default locale
								will be used.
							</para>
						</listitem>
					</itemizedlist>
				</para>
				<para>
					Thus the service provider destination can either be configured via
					the
					<code>SignatureRequestService</code>
					, or via the
					<code>SPDestination</code>
					init-param, or via the
					<code>SPDestinationPage</code>
					init-param.
				</para>
				<para>
					Runtime parameters are configured via init-parameters that
					point to
					HTTP session attributes that will contain the required
					configuration values. The following runtime parameters are
					supported.
					<itemizedlist>
						<listitem>
							<para>
								The eID DSS target page can be configured via a runtime
								parameter by setting the
								<code>TargetSessionAttribute</code>
								to the name of the HTTP session attribute that will contain the
								runtime value of the target.
							</para>
						</listitem>
						<listitem>
							<para>
								The
								<code>SignatureRequestSessionAttribute</code>
								init-param should point to the HTTP session attribute that will
								contain the base64 encoded document to be signed via the eID DSS
								service.
							</para>
						</listitem>
						<listitem>
							<para>
								The
								<code>ContentTypeSessionAttribute</code>
								init-param should point to the HTTP session attribute that will
								contain the mime type of the document to be signed via the eID
								DSS service.
							</para>
						</listitem>
						<listitem>
							<para>
								The
								<code>RelayStateSessionAttribute</code>
								init-param should point to the HTTP session attribute that will
								contain the relay state string to be used when performing the
								eID DSS request.
							</para>
						</listitem>
					</itemizedlist>
				</para>
				<para>
					The document to be signed (or document ID in case of artifact
					binding), along with the content type needs to be put on the
					HTTP
					Session, the names of the session attributes need to be
					specified in
					the
					<code>web.xml</code>
					web deployment descriptor as shown below.
				</para>
				<para>
					Following is a snippet of the
					<code>web.xml</code>
					for
					configuring the
					<code>SignatureRequestServlet</code>
					servlet.
					Here we use a JNDI lookup of the
					<code>SignatureRequestService</code>
					EJB3 session bean.
				</para>
				<programlisting role="XML">
                    <![CDATA[
    <servlet>
        <servlet-name>DSSRequestServlet</servlet-name>
        <servlet-class>
            be.fedict.eid.dss.protocol.simple.client.SignatureRequestServlet
        </servlet-class>
        <init-param>
            <param-name>SignatureRequestService</param-name>
            <param-value>
                be/fedict/eid/dss/sp/bean/SignatureRequestServiceBean
            </param-value>
        </init-param>
        <init-param>
            <param-name>TargetSessionAttribute</param-name>
            <param-value>target</param-value>
        </init-param>
        <init-param>
            <param-name>ContentTypeSessionAttribute</param-name>
            <param-value>ContentType</param-value>
        </init-param>
        <init-param>
            <param-name>RelayStateSessionAttribute</param-name>
            <param-value>RelayState</param-value>
        </init-param>
        <init-param>
            <param-name>SignatureRequestSessionAttribute</param-name>
            <param-value>SignatureRequest</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>DSSRequestServlet</servlet-name>
        <url-pattern>/dss-request</url-pattern>
    </servlet-mapping>
                    ]]>
				</programlisting>
				<para>
					If you wish to control yourself the page that posts the
					signature
					request to the eID DSS Service, the utility class
					<code>SignatureRequestUtil</code>
					is available for creating the service signature if wanted.
					Make sure
					to respect the order of the
					<code>ServiceCertificate.x</code>
					POST parameters!
				</para>
				<para>
					More information on the Java components is available within
					the javadocs that are bundled with the eID DSS SDK package.
				</para>
			</section>
			<section>
				<title>.NET SDK</title>
				<para>
					For easy integration, a .NET SDK is available in the
					<code>eid-dss-sdk-dotnet</code>
					artifact. This artifact
					contains also a DSS Test SP WebSite showing
					the usage of
					the SDK.
				</para>
				<para>
					For SignatureRequest signing, the
					<code>SignatureRequestUtil</code>
					class is available.
				</para>
			</section>

		</section>
		<section>
			<title>Signature Ceremony</title>
			<para>
				The eID Digital Signature Service will guarantee the correct
				execution of the signature ceremony. The signature ceremony is
				presented to the end-user via a web application interface. A first
				screen visualizes the incoming document. Here the end-user can
				choose to either sign the document, or to cancel the signing
				process. The next screen loads an eID Applet to have the document
				signed according to the W3C XMLDSig specification. The XML signature
				also contains a XAdES-X-L v1.4.2 extension in accordance with the
				recommendations of the expert group on the e-Signatures Service
				Directive. The created XML signature is a co-signature, meaning that
				multiple independent signatures can coexist within the same
				document. In case of
				XML documents, the signature is appended as last
				child of the
				document root element. This means that within your XML
				schema the top level element complex type definition should include
				as last element in its sequence:
				<programlisting role="XML"><![CDATA[<element ref="ds:Signature" minOccurs="0" maxOccurs="unbounded" />]]></programlisting>
				with of course
				<code>ds</code>
				defined as
				<code>xmlns:ds="http://www.w3.org/2000/09/xmldsig#"</code>
			</para>
			<para>
				At last the end-user's web browser is
				redirected to the
				originating
				web application where the signed
				document can be processed
				further.
			</para>
		</section>
		<section>
			<title>Signature Response</title>
			<para>
				After a successful completion of the signature ceremony, the
				eID DSS responds to the web application using an HTTP POST via the
				web browser of the client. The following POST protocol parameters
				are
				available to the web application.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						The
						<code>SignatureStatus</code>
						parameter contains the result code of the signature operation.
						The
						value of this parameter can be:
						<itemizedlist>
							<listitem>
								<para>
									<code>OK</code>
									in case the signature ceremony was successfully completed. Only
									in this case
									<code>SignatureResponse</code>
									and
									<code>SignatureCertificate</code>
									will
									also be available.
								</para>
							</listitem>
							<listitem>
								<para>
									<code>FILE_FORMAT</code>
									in case the transmitted file was not a well-formated document.
								</para>
							</listitem>
							<listitem>
								<para>
									<code>USER_CANCELLED</code>
									in case the user cancelled the signature ceremony.
								</para>
							</listitem>
						</itemizedlist>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>SignatureResponse</code>
						contains the base-64 encoded signed document.
					</para>
				</listitem>
				<listitem>
					<para>
						<code>SignatureCertificate</code>
						contains the base-64 encoded X509 certificate of the signatory.
					</para>
				</listitem>
			</itemizedlist>
			<para>
				In case the eID Digital Signature Service signs the response
				messages the following additional POST parameters are available to
				the web application. This protocol message level signature is
				created by the
				eID DSS service itself.
			</para>
			<itemizedlist>
				<listitem>
					<para>
						<code>ServiceSigned</code>
						contains the URL encoded comma-separated list of POST parameters
						signed by the eID DSS itself.
						Some of these parameters may refer to
						paramters from within the
						signing request message.
						Example:
						<code>target,SignatureRequest,SignatureResponse,SignatureCertificate
						</code>
					</para>
				</listitem>
				<listitem>
					<para>
						<code>ServiceSignature</code>
						contains the base64 encoded signature created by the eID DSS
						service itself. This signature can be used by the Relying Party to
						verify the integrity and the authenticity of the protocol response
						message.
						The used signature algorithm is
						<code>SHA1-RSA</code>
						.
					</para>
				</listitem>
				<listitem>
					<para>
						<code>ServiceCertificateChainSize</code>
						contains the length, as an integer string, of the certificate
						chain
						used by the service to sign the request/response protocol
						parameters.
					</para>
				</listitem>
				<listitem>
					<para>
						<code>ServiceCertificate.n</code>
						contains the base64 encoded n-th certificate of the service
						certificate chain.
						<code>n</code>
						goes from 1 to the size of the certificate chain. The eID DSS end
						entity certificate has number 1.
					</para>
				</listitem>
			</itemizedlist>
			<section>
				<title>Java SDK</title>
				<para>
					To ease the handling of DSS response messages according to the
					described protocol we have provided eID DSS SDK components. These
					components can
					be found within the
					<code>eid-dss-protocol-simple-client</code>
					artifact. The corresponding javadoc documentation is also part of
					the eID DSS SDK.
				</para>
				<para>
					The
					<code>SignatureResponseProcessorServlet</code>
					servlet can process incoming eID DSS response messages according to
					the described eID DSS protocol. The most important init-params are:
					<itemizedlist>
						<listitem>
							<para>
								The
								<code>NextPage</code>
								init-param contains the relative location of the web page to
								where the servlet should redirect after a successful processing
								of the eID DSS response message.
							</para>
						</listitem>
						<listitem>
							<para>
								The
								<code>ErrorPage</code>
								init-param contains the relative location of the web page to
								where the servlet should redirect after a failed processing of
								the eID DSS response message.
							</para>
						</listitem>
						<listitem>
							<para>
								The
								<code>ErrorMessageSessionAttribute</code>
								contains the name of the HTTP session attribute that will be
								used to store the error message after a failed processing of the
								eID DSS response message.
							</para>
						</listitem>
						<listitem>
							<para>
								The
								<code>SignedDocumentSessionAttribute</code>
								contains the name of the HTTP session attribute that will be
								used to store the signed document after a sucessful processing
								of the eID DSS response message.
							</para>
						</listitem>
					</itemizedlist>
					Further documentation can be found within the javadoc of the eID
					DSS SDK components.
				</para>
			</section>
			<section>
				<title>.NET SDK</title>
				<para>
					To ease the handling of DSS response messages according to the
					described protocol we have provided eID DSS SDK components.
					These
					can
					be found in the
					<code>eid-dss-sdk-dotnet</code>
					artifact. You can use the
					<code>SignatureProcessor</code>
					class for validation and parsing of the DSS responses.
					Refer to the
					Test DSS SP WebSite for more information on the
					usage.
				</para>
			</section>
		</section>
		<section>
			<title>Artifact Binding</title>
			<para>
				The Artifact Binding is a variation to the standard Browser POST
				protocol where the to be signed document and the signed document
				will be sent and retrieved to/from the eID DSS Service using a
				seperate synchronous SOAP web service. The eID DSS Service provides
				such
				a
				service as part of its OASIS DSS Web Service. More detail on
				this web
				service can be found in
				<link linkend="oasis_ws" endterm="oasis_ws.title" />
				.
			</para>
			<para>
				The signature request and response will therefore vary slightly
				as the identifiers will be posted instead of the actual
				documents.
			</para>
			<para>
				For the signature request, the required
				<code>SignatureRequest</code>
				POST parameter
				is replaced with the required
				<code>SignatureRequestId</code>
				POST parameter. This is the
				identifier returned by the OASIS DSS Web
				Service "store" call.
			</para>
			<para>
				For the signature response, the
				<code>SignatureResponse</code>
				POST parameter will be replaced by the
				<code>SignatureResponseId</code>
				POST parameter which
				contains the identifier to be used in the
				OASIS
				DSS Web Service
				"retrieve"
				call for fetching the signed
				document.
			</para>
		</section>
	</section>
	<section id="oasis_ws">
		<title id="oasis_ws.title">OASIS DSS Web Service</title>
		<para>
			The eID Digital Signature Service provides a SOAP web service
			for
			validation of signed documents and for a generic "Artifact
			Binding"
			which signature protocols can use
			for
			transmitting the to be
			signed documents to the eID DSS Service and
			for retrieval of the
			signed documents. This web service has been
			implemented according to
			the OASIS Digital Signature Service Core
			Protocols, Elements, and
			Bindings Version 1.0. Specific profiles are
			used for validation and
			the "Artifact Binding".
		</para>
		<para>In this section we highlight the web service protocol by
			example. A web service client can connect to the SOAP web service
			using some URL. For example:
		</para>
		<programlisting>https://www.e-contract.be/eid-dss-ws/dss</programlisting>
		<para>
			In the examples we'll use the following namespace prefixes:
		</para>
		<table>
			<title>Used namespaces</title>
			<tgroup cols="2">
				<colspec colwidth="1*" />
				<colspec colwidth="8*" />
				<thead>
					<row>
						<entry>Prefix</entry>
						<entry>Namespace</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>
							<code>soap</code>
						</entry>
						<entry>
							<code>http://schemas.xmlsoap.org/soap/envelope/</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>dss</code>
						</entry>
						<entry>
							<code>urn:oasis:names:tc:dss:1.0:core:schema</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>vr</code>
						</entry>
						<entry>
							<code>
								urn:oasis:names:tc:dss-x:1.0:profiles:verificationreport:schema#
							</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>xades</code>
						</entry>
						<entry>
							<code>http://uri.etsi.org/01903/v1.3.2#</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>xmldsig</code>
						</entry>
						<entry>
							<code>http://www.w3.org/2000/09/xmldsig#</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>artifact</code>
						</entry>
						<entry>
							<code>be:fedict:eid:dss:profile:artifact-binding:1.0</code>
						</entry>
					</row>
					<row>
						<entry>
							<code>origdoc</code>
						</entry>
						<entry>
							<code>be:fedict:eid:dss:profile:original-document:1.0</code>
						</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
		<section>
			<title>Validation</title>
			<para>
				The validation operation of the web service also implements
				the
				OASIS Profile for Comprehensive Multi-signature Verification
				Reports
				for OASIS Digital Signature Services Version 1.0 for
				providing
				detailed reporting on the signatures of a validated
				document.
			</para>
			<para>
				A SOAP request for validation of a signed document looks as
				follows:
			</para>
			<programlisting role="XML"><![CDATA[<soap:Envelope>
    <soap:Body>
        <dss:VerifyRequest RequestID="some-id">
            <dss:OptionalInputs>
                <vr:ReturnVerificationReport>
                    <vr:IncludeVerifier>false</vr:IncludeVerifier>
                    <vr:IncludeCertificateValues>true</vr:IncludeCertificateValues>
                    <vr:ReportDetailLevel>
                    urn:oasis:names:tc:dss-x:1.0:profiles:verificationreport:reportdetail:noDetails
                    </vr:ReportDetailLevel>
                </vr:ReturnVerificationReport>
            </dss:OptionalInputs>
            <dss:InputDocuments>
                <dss:Document>
                    <dss:Base64XML>the document base64 encoded</dss:Base64XML>
                </dss:Document>
            </dss:InputDocuments>
        </dss:VerifyRequest>
    </soap:Body>
    </soap:Envelope>]]></programlisting>
			<para>
				Depending on the mime type of the document
				<code>Base64Data</code>
				can be used instead of
				<code>Base64XML</code>
				.
			</para>
			<para>
				The corresponding SOAP response looks as follows:
			</para>
			<programlisting role="XML"><![CDATA[<soap:Envelope>
    <soap:Body>
        <dss:Response RequestID="the original request id">
            <dss:Result>
                <dss:ResultMajor>
                    urn:oasis:names:tc:dss:1.0:resultmajor:Success
                </dss:ResultMajor>
                <dss:ResultMinor>
                    urn:oasis:names:tc:dss:1.0:resultminor:valid:signature:OnAllDocuments
                </dss:ResultMinor>
            </dss:Result>
            <dss:OptionalOutputs>
                <vr:VerificationReport>
                    <vr:IndividualReport>
                        <vr:SignedObjectIdentifier>
                            <vr:SignedProperties>
                                <vr:SignedSignatureProperties>
                                    <xades:SigningTime>
                                        2010-09-13T15:35:49.767+02:00
                                    </xades:SigningTime>
                                </vr:SignedSignatureProperties>
                            </vr:SignedProperties>
                        </vr:SignedObjectIdentifier>
                        <dss:Result>
                            <dss:ResultMajor>
                                urn:oasis:names:tc:dss:1.0:resultmajor:Success
                            </dss:ResultMajor>
                            <dss:ResultMinor>
                                urn:oasis:names:tc:dss:1.0:resultminor:valid:signature:OnAllDocuments
                            </dss:ResultMinor>
                        </dss:Result>
                        <vr:Details>
                            <vr:IndividualCertificateReport>
                                <vr:CertificateIdentifier>
                                    <xmldsig:X509IssuerName>
                                        SERIALNUMBER=200612, CN=Citizen CA, C=BE
                                    </xmldsig:X509IssuerName>
                                    <xmldsig:X509SerialNumber>
                                        21267647932559078400084294942057726232
                                    </xmldsig:X509SerialNumber>
                                </vr:CertificateIdentifier>
                                <vr:Subject>
                                    SERIALNUMBER=79102520991, GIVENNAME=Frank Henri, SURNAME=Cornelis, CN=Frank Cornelis (Signature), C=BE
                                </vr:Subject>
                                <vr:ChainingOK>
                                    <vr:ResultMajor>
                                        urn:oasis:names:tc:dss:1.0:detail:valid
                                    </vr:ResultMajor>
                                </vr:ChainingOK>
                                <vr:ValidityPeriodOK>
                                    <vr:ResultMajor>
                                        urn:oasis:names:tc:dss:1.0:detail:valid
                                    </vr:ResultMajor>
                                </vr:ValidityPeriodOK>
                                <vr:ExtensionsOK>
                                    <vr:ResultMajor>
                                        urn:oasis:names:tc:dss:1.0:detail:valid
                                    </vr:ResultMajor>
                                </vr:ExtensionsOK>
                                <vr:CertificateValue>
                                    base64 encoded signer certificate
                                </vr:CertificateValue>
                                <vr:SignatureOK>
                                    <vr:SigMathOK>
                                        <vr:ResultMajor>
                                            urn:oasis:names:tc:dss:1.0:detail:valid
                                        </vr:ResultMajor>
                                    </vr:SigMathOK>
                                </vr:SignatureOK>
                                <vr:CertificateStatus>
                                    <vr:CertStatusOK>
                                        <vr:ResultMajor>
                                            urn:oasis:names:tc:dss:1.0:detail:valid
                                        </vr:ResultMajor>
                                    </vr:CertStatusOK>
                                </vr:CertificateStatus>
                            </vr:IndividualCertificateReport>
                        </vr:Details>
                    </vr:IndividualReport>
                </vr:VerificationReport>
            </dss:OptionalOutputs>
        </dss:Response>
    </soap:Body>
    </soap:Envelope>]]></programlisting>
			<para>
				The signature is uniquely identified by the
				<code>SigningTime</code>
				element. The certificate of the signatory is delivered via the
				<code>CertificateValue</code>
				element. If the XAdES signature contains a claimed role, the
				verification report contains a
				<code>Properties</code>
				element under
				<code>DetailedSignatureReport</code>
				similar to:
				<programlisting role="XML"><![CDATA[
				<vr:Properties>
					<vr:SignedProperties>
						<vr:SignedSignatureProperties>
							<xades:SigningTime>2010-09-13T15:35:49.767+02:00</xades:SigningTime>
							<vr:ClaimedRoles>
								<xades:ClaimedRole>eID Architect</xades:ClaimedRole>
							</vr:ClaimedRoles>
						</vr:SignedSignatureProperties>
					</vr:SignedProperties>
				</vr:Properties>
				]]></programlisting>
			</para>
			<para>
				If the Relying Party provides the original document as part of the
				signature validation request, the eID DSS will check whether the
				content of the signed document corresponds with the content of the
				given original document. The original document should be provided as
				<code>OptionalInput</code>
				element as shown in the following example:
				<programlisting role="XML"><![CDATA[<soap:Envelope>
	<soap:Body>
		<dss:VerifyRequest RequestID="id-1234">
			<dss:OptionalInputs>
				<origdoc:OriginalDocument>
					<dss:InputDocuments>
						<dss:Document>
							<dss:Base64XML>the_original_document</dss:Base64XML>
						</dss:Document>
					</dss:InputDocuments>
				</origdoc:OriginalDocument>
			</dss:OptionalInputs>
			<dss:InputDocuments>
				<dss:Document>
					<dss:Base64XML>the_signed_document</dss:Base64XML>
				</dss:Document>
			</dss:InputDocuments>
		</dss:VerifyRequest>
	</soap:Body>
</soap:Envelope>]]></programlisting>
			</para>
		</section>
		<section>
			<title>Artifact Binding</title>
			<para>
				Via the artifact binding eID DSS protocol, applications can use
				a regular SOAP web service to transfer the documents to/from the eID
				DSS. The actual signing request/response browser POST protocol can
				then simply use references to the documents to be processed. The eID
				DSS document repository will store the documents no longer than
				required to be able to complete a document signing protocol run. The
				artifact binding is an interesting feature when coping with large
				documents that need to be signed.
			</para>
			<para>
				A custom OASIS DSS Profile has been introduced for this which uses
				the
				<code>SignRequest</code>
				operation for pushing the
				to be signed document and retrieval of the
				signed document to/from the eID DSS service. The profile URI for
				this is:
				<code>be:fedict:eid:dss:profile:artifact-binding:1.0</code>
			</para>
			<section>
				<title>Store</title>
				<para>
					A SOAP request for "storing" the to be signed document to
					the
					eID DSS Service looks as follow:
				</para>
				<programlisting role="XML">
                    <![CDATA[
<soap:Envelope>
    <soap:Body>
        <dss:SignRequest
            Profile="be:fedict:eid:dss:profile:artifact-binding:1.0"
            RequestID="dss-sign-request-1234...">

            <dss:OptionalInputs>
                <artifact:ReturnStorageInfo />
            </dss:OptionalInputs>

            <dss:InputDocuments>
                <dss:Document>
                    <dss:Base64XML>...</dss:Base64XML>
                </dss:Document>
            </dss:InputDocuments>

        </dss:SignRequest>
    </soap:Body>
</soap:Envelope>
                    ]]>
				</programlisting>
				<para>
					The to be signed document is passed as base64 encoded in
					the OASIS
					DSS
					<code>InputDocuments</code>
					element.
				</para>
				<para>
					The custom
					<code>artifact:ReturnStorageInfo</code>
					optional
					input is used within the
					<code>dss:OptionalInputs</code>
					element to mark
					that the document passed in
					<code>dss:InputDocument/dss:Document</code>
					should be
					stored for later signing. Only accepted by the eID
					DSS when
					<code>dss:SignRequest/@Profile</code>
					is set to the
					corresponding profile URI.
					The eID DSS will return a
					custom
					<code>artifact:StorageInfo</code>
					element within
					<code>dss:OptionalOutputs</code>
					in the returned
					<code>dss:SignResponse</code>
					.
				</para>
				<para>
					Following is an example of such a SOAP response.
				</para>
				<programlisting role="XML">
                    <![CDATA[
<soap:Envelope>
    <soap:Body>
        <dss:SignResponse
            Profile="be:fedict:eid:dss:profile:artifact-binding:1.0"
            RequestID="dss-sign-request-1234...">

            <dss:Result>
                <dss:ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</dss:ResultMajor>
            </dss:Result>

            <dss:OptionalOutputs>
                <artifact:StorageInfo>
                    <artifact:Identifier>de2f6265-fa06-4ae7-8f7f-d289cd590a32</artifact:Identifier>
                    <artifact:Validity>
                        <artifact:NotBefore>2011-05-11T16:38:50.600+02:00</artifact:NotBefore>
                        <artifact:NotAfter>2011-05-11T16:43:50.392+02:00</artifact:NotAfter>
                    </artifact:Validity>
                </artifact:StorageInfo>
            </dss:OptionalOutputs>

        </dss:SignResponse>
    </soap:Body>
</soap:Envelope>
                    ]]>
				</programlisting>
				<para>
					The
					<code>SignResponse</code>
					request ID needs to match the
					request ID of the
					<code>SignRequest</code>
					.
				</para>
				<para>
					The custom
					<code>artifact:StorageInfo</code>
					element
					contains the identifier of the stored document and the
					validity of the temporary storage of the given document. The
					eID DSS
					manages the lifecycle of the document within
					this temporary
					storage.
				</para>
				<para>
					The Signature Protocol can use the identifier
					for
					making a
					signature request to the eID DSS Service which
					will
					retrieve the
					document from its temporary storage when
					needed for
					signing, sign the
					document and store the signed
					document in the
					temporary storage for
					retrieval later on.
				</para>
			</section>
			<section>
				<title>Retrieve</title>
				<para>
					A SOAP request for "retrieval" of the by now signed document
					from the eID DSS Service looks as follow:
				</para>
				<programlisting role="XML">
                    <![CDATA[
<soap:Envelope>
    <soap:Body>
        <dss:SignRequest
            Profile="be:fedict:eid:dss:profile:artifact-binding:1.0"
            RequestID="dss-sign-request-1234...">

            <dss:OptionalInputs>
                <artifact:ReturnStoredDocument>
                    <artifact:Identifier>f86a925b-0360-47c7-b329-a7fa3988e2e6</Identifier>
                </artifact:ReturnStoredDocument>
            </dss:OptionalInputs>
        </dss:SignRequest>
    </soap:Body>
</soap:Envelope>
                    ]]>
				</programlisting>
				<para>
					The identifier is the identifier of the signed document in
					the eID
					DSS service's temporary storage. This identifier is
					communicated
					back to the RP according to the used Signature
					Protocol, being
					<code>SignatureResponseId</code>
					in case of
					the eID DSS Browser Post Protocol. This identifier is
					only
					accepted by the eID DSS when
					<code>dss:SignRequest/@Profile</code>
					is set
					to
					the corresponding profile URI. The eID DSS will return
					the
					document
					within a
					<code>
						dss:SignResponse/dss:OptionalOutputs/dss:DocumentWithSignature
					</code>
					element. After document retrieval, the eID DSS
					removes the
					document
					from its temporary storage. If the
					document is not
					retrieved by the
					Relying Party, the eID DSS
					removes the document
					from the temporary
					storage after a
					certain time indicated by
					<code>Validity/NotAfter</code>
					within the
					<code>SignRequest</code>
					element.
				</para>
				<para>
					Following is an example of a SOAP response to this request.
				</para>
				<programlisting role="XML">
                    <![CDATA[
<soap:Envelope>
    <soap:Body>
        <dss:SignResponse
            Profile="be:fedict:eid:dss:profile:artifact-binding:1.0"
            RequestID="dss-sign-request-1234...">

            <dss:Result>
                <dss:ResultMajor>urn:oasis:names:tc:dss:1.0:resultmajor:Success</dss:ResultMajor>
            </dss:Result>

            <dss:OptionalOutputs>
                <dss:DocumentWithSignature>
                    <dss:Document>
                        <dss:Base64XML>...</dss:Base64XML>
                    </dss:Document>
                </dss:DocumentWithSignature>
            </dss:OptionalOutputs>

        </dss:SignResponse>
    </soap:Body>
</soap:Envelope>
                    ]]>
				</programlisting>
				<para>
					The
					<code>SignResponse</code>
					's request ID needs to match
					the request ID of the
					<code>SignRequest</code>
					.
				</para>
				<para>
					The signed document is returned base64 encoded in the OASIS
					DSS
					<code>DocumentWithSignature</code>
					element.
				</para>
				<para>
					Instead of returning with
					<code>Base64XML</code>
					it is possible that the web service returns with
					<code>Base64Data</code>
					in case the document has a mime type different from
					<code>text/xml</code>
					.
				</para>
			</section>
		</section>
		<section>
			<title>Java SDK</title>
			<para>
				The eID DSS SDK comes with a Java OASIS DSS web service
				client
				component. This component is part of the
				<code>eid-dss-client</code>
				artifact. The corresponding javadoc documentation is also part of
				the eID DSS SDK.
			</para>
		</section>
		<section>
			<title>.NET SDK</title>
			<para>
				The eID DSS SDK comes with a .NET OASIS DSS web service
				client
				component. This component is part of the
				<code>eid-dss-sdk-dotnet</code>
				artifact. Refer to the DSS
				Test SP WebSite also for more information
				on the usage.
			</para>
		</section>
	</section>
	<section>
		<title>Document Visualization</title>
		<para>
			The eID Digital Signature Service features visualization of the
			documents before they are signed. In case of XML documents, the
			Relying Party can register an XML Schema and XML Style Sheet at the
			eID DSS hosting party to visualize the XML data structure within the
			web browser as part of the signature ceremony. This allows the
			Relying Party to define a domain specific language for its
			transactions that need to be signed.
		</para>
		<para>
			For example, suppose the Relying Party defined a domain specific
			language to express some transaction as follows:
		</para>
		<programlisting role="XML"><![CDATA[<Transaction xmlns="urn:be:fedict:eid:dss:example">
	<From>Tom</From>
	<To>Jerry</To>
	<Amount>10.5</Amount>
	<Description>Example transaction</Description>
</Transaction>]]></programlisting>
		<para>
			The corresponding XML Schema could look as follows.
		</para>
		<programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<schema xmlns="http://www.w3.org/2001/XMLSchema"
	targetNamespace="urn:be:fedict:eid:dss:example"
	xmlns:tns="urn:be:fedict:eid:dss:example" elementFormDefault="qualified"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
	<xsd:import namespace="http://www.w3.org/2000/09/xmldsig#"
		schemaLocation="xmldsig-core-schema.xsd" />
	<element name="Transaction" type="tns:TransactionType" />
	<complexType name="TransactionType">
		<sequence>
			<element name="From" type="xsd:string" />
			<element name="To" type="xsd:string" />
			<element name="Amount" type="xsd:double" />
			<element name="Description" type="xsd:string" minOccurs="0" />
			<element ref="ds:Signature" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
	</complexType>
</schema>]]></programlisting>
		<para>
			Notice here that the last element of the top level element complex
			type definition refers to
			<code>ds:Signature</code>
			. This is required because the eID DSS appends XML signatures as last
			child node of the top level element of the XML documents.
		</para>
		<para>
			A possible XML Style Sheet could then be:
		</para>
		<programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
	xmlns:tns="urn:be:fedict:eid:dss:example">
	<xsl:param name="language">en</xsl:param>
	<xsl:template match="/tns:Transaction">

		<xsl:variable name="from">
			<xsl:choose>
				<xsl:when test="$language = 'nl'">
					Van
				</xsl:when>
				<xsl:otherwise>
					From
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>

		<html>
			<body>
				<h1>Transaction</h1>
				<table>
					<tr>
						<th>
							<xsl:copy-of select="$from" />
							:
						</th>
						<td>
							<xsl:value-of select="tns:From" />
						</td>
					</tr>
					<tr>
						<th>To:</th>
						<td>
							<xsl:value-of select="tns:To" />
						</td>
					</tr>
					<tr>
						<th>Amount:</th>
						<td>
							<xsl:value-of select="tns:Amount" />
						</td>
					</tr>
					<xsl:for-each select="tns:Description">
						<tr>
							<th>Description:</th>
							<td>
								<xsl:value-of select="." />
							</td>
						</tr>
					</xsl:for-each>
				</table>
			</body>
		</html>
	</xsl:template>
</xsl:stylesheet>]]></programlisting>
		<para>
			The XML Style Sheet should output HTML.
		</para>
		<para>
			As you can see the XML Style Sheet receives a
			<code>language</code>
			parameter from the eID Digital Signature Service for localization of
			the view.
		</para>
		<para>
			An XML Style Sheet can easily be developed using the following
			command:
		</para>
		<programlisting role="XML"><![CDATA[xsltproc --stringparam language nl example.xsl example.xml]]></programlisting>
		<para>
			Once the XML Schema and corresponding XML Style Sheet is ready,
			you can submit this to the eID Digital Signature Service hosting
			party for registration within the eID DSS service.
		</para>
		<para>
			Per document type, and thus per XML Style Sheet, you should have
			different XML namespaces. The eID DSS selects the XML Style Sheet
			based on the XML namespace of the received document.
		</para>
	</section>
	<section>
		<title>Batch Signing</title>
		<para>
			Batch Signing is a kind of signing process where one signature
			covers multiple documents. The verification of a batch signature
			happens independent of the original set of signed documents. Hence
			batch signing is a concept entirely managed by the Relying Party
			application. To construct a batch signing work flow the Relying Party
			application should define an XML structure similar to the following
			example.
		</para>
		<programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<batch:Container xmlns:batch="urn:be:fedict:eid:dss:batch"
	xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
    <batch:Description>
    	This batch contains files related to XYZ.
    </batch:Description>
    <batch:Document URI="file-1.docx">
    	<batch:Summary>
    		Human-readable summary of file-1.docx
    	</batch:Summary>
    	<ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha512"/>
    	<ds:DigestValue>12345678</ds:DigestValue>
    </batch:Document>
    <batch:Document URI="file-2.pdf">
    	<batch:Summary>
    		Human-readable summary of file-2.pdf
    	</batch:Summary>
    	<ds:DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha512"/>
    	<ds:DigestValue>87654321</ds:DigestValue>
    </batch:Document>
    ...
</batch:Container>
]]></programlisting>
		<para>
			The Relying Party can register an XML Schema and corresponding
			XML Stylesheet with the eID DSS Administrator to improve the
			visualization of the batch structure within the eID DSS.
		</para>
		<para>
			For signature validation the Relying Party application first
			uses the eID DSS OASIS Web Service. As a second step the Relying
			Party application should check the digest values against the
			available documents in its document repository.
		</para>
	</section>
	<section>
		<title>Security Considerations</title>
		<para>
			When a Relying Party does not use the eID DSS Browser POST protocol
			signature security mechanism, the Relying Party should check whether
			the content of the signed document corresponds with the agreed
			(between RP and end-user) business data. Otherwise the end-user could
			change the to-be-signed data before entering into the eID DSS
			signature flow. We provide two security mechanisms to detect this:
			<itemizedlist>
				<listitem>
					<para>
						On is to use the eID DSS Browser POST protocol request
						signature mechanism. This requires an explicit registration within
						the eID DSS via the admin console.
					</para>
				</listitem>
				<listitem>
					<para>
						A Relying Party can also provide the original document as
						part of the OASIS DSS verification web service call to verify the
						signatures on a signed document.
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			The eID DSS Browser POST response message can also be signed by
			the eID DSS service itself so the Relying Party can have some
			guarantee that the document was indeed processed by the eID DSS
			service.
		</para>
	</section>
	<appendix>
		<title>eID Digital Signature Service Developer's Guide License</title>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="cc.logo.large.png"
						scale="100" />
				</imageobject>
			</mediaobject>
			This document has been released under the Creative Commons license.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="share.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You are free to Share — to copy, distribute and transmit the work.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="by.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You must attribute the work in the manner specified by the author or
			licensor (but not in any way that suggests that they endorse you or
			your use of the work).
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nc.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not use this work for commercial purposes.
			<mediaobject>
				<imageobject>
					<imagedata format="PNG" fileref="nd.large.png" scale="20" />
				</imageobject>
			</mediaobject>
			You may not alter, transform, or build upon this work.
		</para>
		<para>
			More information about the Creative Commons license conditions can be
			found at
			<ulink url="http://creativecommons.org/">Creative Commons organization</ulink>
			.
		</para>
	</appendix>
	<appendix>
		<title>eID Digital Signature Service License</title>
		<para>
			The eID Digital Signature Service source code has been released
			under the GNU LGPL version 3.0.
		</para>
		<para>
			<code>
				This is free software; you can redistribute it and/or modify it
				under the terms of the GNU Lesser General Public License version 3.0
				as published by the Free Software Foundation.
			</code>
		</para>
		<para>
			<code>
				This software is distributed in the hope that it will be
				useful, but WITHOUT ANY WARRANTY; without even the implied warranty
				of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
				Lesser General Public License for more details.
			</code>
		</para>
		<para>
			<code>
				You should have received a copy of the GNU Lesser General
				Public License along with this software; if not, see
				http://www.gnu.org/licenses/.
			</code>
		</para>
	</appendix>
	<appendix>
		<title>Revision history</title>
		<table>
			<title>Revision history</title>
			<tgroup cols="3">
				<colspec colwidth="1*" />
				<colspec colwidth="1*" />
				<colspec colwidth="2*" />
				<thead>
					<row>
						<entry>Date</entry>
						<entry>Author</entry>
						<entry>Description</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>9 Oct 2009</entry>
						<entry>Frank Cornelis</entry>
						<entry>Initial version.</entry>
					</row>
					<row>
						<entry>25 Aug 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>language parameter.</entry>
					</row>
					<row>
						<entry>27 Aug 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>Service signature.</entry>
					</row>
					<row>
						<entry>15 Sep 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>OASIS DSS validation web service.</entry>
					</row>
					<row>
						<entry>21 Sep 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>XML schemas and XML style sheets</entry>
					</row>
					<row>
						<entry>7 Oct 2010</entry>
						<entry>Frank Cornelis</entry>
						<entry>ODF, OOXML, ZIP document formats.</entry>
					</row>
					<row>
						<entry>9 May 2011</entry>
						<entry>Wim Vandenhaute</entry>
						<entry>eID DSS Artifact Binding</entry>
					</row>
					<row>
						<entry>5 July 2011</entry>
						<entry>Frank Cornelis</entry>
						<entry>ASiC document format, batch signing.</entry>
					</row>
					<row>
						<entry>26 August 2011</entry>
						<entry>Frank Cornelis</entry>
						<entry>Improved protocol and Java components documentation.
						</entry>
					</row>
					<row>
						<entry>1 October 2012</entry>
						<entry>Frank Cornelis</entry>
						<entry>Reworked the introduction.</entry>
					</row>
					<row>
						<entry>17 September 2013</entry>
						<entry>Frank Cornelis</entry>
						<entry>Removed FedICT branding.</entry>
					</row>
				</tbody>
			</tgroup>
		</table>
	</appendix>
</article>